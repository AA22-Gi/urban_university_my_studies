"""
Задача "Банковские операции":

Необходимо создать класс Bank со следующими свойствами:
    Атрибуты объекта:
        balance - баланс банка (int)
        lock - объект класса Lock для блокировки потоков.

    Методы объекта:
        Метод deposit:
            1. Будет совершать 100 транзакций пополнения средств.
            2. Пополнение - это увеличение баланса на случайное целое число от 50 до 500.
            3. Если баланс больше или равен 500 и замок lock заблокирован - lock.locked(),
            то разблокировать его методом release.
            4. После увеличения баланса должна выводится строка
            "Пополнение: <случайное число>. Баланс: <текущий баланс>".
            5. Также после всех операций поставьте ожидание в 0.001 секунды,
            тем самым имитируя скорость выполнения пополнения.

        Метод take:
            1. Будет совершать 100 транзакций снятия.
            2. Снятие - это уменьшение баланса на случайное целое число от 50 до 500.
            3. В начале должно выводится сообщение "Запрос на <случайное число>".
            4. Далее производится проверка: если случайное число меньше или равно текущему балансу,
            то произвести снятие, уменьшив balance на соответствующее число и вывести на экран
            "Снятие: <случайное число>. Баланс: <текущий баланс>".
            5. Если случайное число оказалось больше баланса, то вывести строку
            "Запрос отклонён, недостаточно средств" и заблокировать поток методом acquiere.

Далее создайте объект класса Bank и создайте 2 потока для его методов deposit и take. Запустите эти потоки.
После конца работы потоков выведите строку: "Итоговый баланс: <баланс объекта Bank>".
По итогу вы получите скрипт блокирующий поток до баланса равному 500 и больше или блокирующий,
когда происходит попытка снятия при недостаточном балансе.

Примечания:
    1. Для генерации случайного целого числа используйте функцию randint из модуля random.
    2. Для ожидания используйте функцию sleep из модуля time.
    3. Особо важно соблюсти верную блокировку: в take замок закрывается, в deposit открывается.
"""
import threading
from random import randint
from time import sleep


class Bank:
    def __init__(self):
        self.balance = 0
        self.lock = threading.Lock()

    def deposit(self):
        for i in range(100):
            random_number = randint(50, 500)
            self.balance += random_number
            if self.balance >= 500 and self.lock.locked():
                self.lock.release()
            print(f'Пополнение: {random_number}. Баланс: {self.balance}')
            sleep(0.001)

    def take(self):
        for i in range(100):
            random_number = randint(50, 500)
            print(f'Запрос на {random_number}')
            if random_number <= self.balance:
                self.balance -= random_number
                print(f'Снятие: {random_number}. Баланс: {self.balance}')
                sleep(0.001)
            else:
                print(f'Запрос отклонён, недостаточно средств')
                self.lock.acquire()
                sleep(0.001)


bk = Bank()

thread1 = threading.Thread(target=Bank.deposit, args=(bk,), name='Поток 1')
thread2 = threading.Thread(target=Bank.take, args=(bk,),  name='Поток 2')

thread1.start()
thread2.start()
thread1.join()
thread2.join()

print(f'Итоговый баланс: {bk.balance}')
